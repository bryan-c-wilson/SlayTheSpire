density_data <- ggplot_build(ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5))$data[[1]]
# Filter density data for nearby floors (16, 17, 18)
density_near_peak <- density_data %>%
filter(round(x, 0) %in% c(16, 17, 18)) %>%
arrange(desc(density))  # Sort by density to find the peak
print(density_near_peak)
# Update key_floors to include the correct peak
key_floors <- c(1, 8, 16, 24, 33, 40, 50)  # Include the correct peak floor
# Recompute the killed_by summary and plot as before
top_killed_by <- killed_by_summary %>%
group_by(floor_reached) %>%
top_n(1, count)  # Keep only the top (most frequent) killer per floor
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
expand_limits(y = 0.1) +
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by, aes(x = floor_reached, y = max_y + 0.02, label = killed_by),
vjust = -0.5, angle = 90, color = "black", size = 3, inherit.aes = FALSE)
# Check if floor 16 is present in the top_killed_by data
top_killed_by %>%
filter(floor_reached == 16)
print(top_killed_by)
ggplot(reddit_deaths_summary_df, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = percent_format()) +
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal()
# Inspect the raw data for floor 17 to check for missing killed_by values
nested_df %>%
filter(floor_reached == 17 & victory == FALSE) %>%
select(character_chosen, killed_by, floor_reached, ascension_level)
# Inspect the raw data for floor 17 to check for missing killed_by values
nested_df %>%
filter(floor_reached == 16 & victory == FALSE) %>%
select(character_chosen, killed_by, floor_reached, ascension_level)
# Expand y-axis limits to give more room above the peak
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
expand_limits(y = 0.15) +  # Increase this value to provide more space
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by, aes(x = floor_reached, y = max_y + 0.02, label = killed_by),
vjust = -0.5, angle = 90, color = "black", size = 3, inherit.aes = FALSE)
# Manually adjust max_y for floor 16 to ensure the label appears
top_killed_by <- top_killed_by %>%
mutate(max_y = ifelse(floor_reached == 16, max_y + 0.05, max_y))  # Increase y for floor 16
# Plot with manually adjusted label position for floor 16
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
expand_limits(y = 0.15) +  # Increase to make sure everything fits
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by, aes(x = floor_reached, y = max_y + 0.02, label = killed_by),
vjust = -0.5, angle = 90, color = "black", size = 3, inherit.aes = FALSE)
# Check max_y for floor 16
top_killed_by %>%
filter(floor_reached == 16)
## Step 14: Save plots as PNG files ====
output_dir <- "Slay_The_Spire/images"
# Check if there are any deaths recorded at floor 16 in the original data
reddit_data_deaths %>%
filter(floor_reached == 16 & victory == FALSE) %>%
select(character_chosen, killed_by, floor_reached)
# Recompute killed_by summary and include floor 16
top_killed_by <- killed_by_summary %>%
group_by(floor_reached) %>%
filter(floor_reached == 16 | floor_reached %in% key_floors) %>%  # Ensure floor 16 is included
top_n(1, count)  # Keep only the most frequent killer per floor
# Replot the density with the manually added floor 16
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
expand_limits(y = 0.15) +  # Ensure enough space above peaks
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by, aes(x = floor_reached, y = max_y + 0.02, label = killed_by),
vjust = -0.5, angle = 90, color = "black", size = 3, inherit.aes = FALSE)
# Manually add floor 16 to top_killed_by if it's missing
top_killed_by <- top_killed_by %>%
add_row(floor_reached = 16, killed_by = "Act I Boss", count = 999, max_y = 0.08)  # Adjust values as needed
print(top_killed_by)
# Summarize the killed_by data to ensure floor 16 is included
killed_by_summary <- reddit_data_deaths %>%
filter(victory == FALSE) %>%  # Only include runs where players died
group_by(floor_reached, killed_by) %>%
summarise(count = n(), .groups = 'drop')  # Count deaths by floor and killer
killed_by_summary %>% filter(floor_reached == 16)
# Find the most frequent killer for each floor, including floor 16
top_killed_by <- killed_by_summary %>%
group_by(floor_reached) %>%
top_n(1, count)  # Select the most frequent killer for each floor
# Plot with floor 16 now included
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
expand_limits(y = 0.15) +
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by, aes(x = floor_reached, y = max_y + 0.02, label = killed_by),
vjust = -0.5, angle = 90, color = "black", size = 3, inherit.aes = FALSE)
# Simplified plot with the updated top_killed_by (no need for max_y)
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by, aes(x = floor_reached, y = 0, label = killed_by),  # Place the labels at y = 0
vjust = -0.5, angle = 90, color = "black", size = 3, inherit.aes = FALSE)
print(key_floors)
# Your list of key floors to label
key_floors <- c(1, 8, 16, 24, 33, 40, 50)
# Filter top_killed_by to include only the key floors
top_killed_by_filtered <- top_killed_by %>%
filter(floor_reached %in% key_floors)  # Keep only key floors
# Simplified plot with labels only for key floors
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by_filtered, aes(x = floor_reached, y = 0, label = killed_by),
vjust = -0.5, angle = 90, color = "black", size = 3, inherit.aes = FALSE)
ggplot(reddit_deaths_summary_df, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by_filtered, aes(x = floor_reached, y = 0, label = killed_by),
vjust = -0.5, angle = 90, color = "black", size = 3, inherit.aes = FALSE)
reddit_data_deaths <- nested_df %>%
filter(
(victory==FALSE)
) %>%
select(character_chosen, killed_by, floor_reached, ascension_level, victory)  # Select relevant columns for inspection
# Your list of key floors to label
key_floors <- c(1, 8, 16, 24, 33, 40, 50)
# Step 2: Summarize the killed_by data (count deaths by floor and killer)
killed_by_summary <- reddit_data_deaths %>%
group_by(floor_reached, killed_by) %>%
summarise(count = n(), .groups = 'drop')  # Count deaths by floor and killer
# Step 3: Select the most frequent killer for each floor
top_killed_by <- killed_by_summary %>%
group_by(floor_reached) %>%
top_n(1, count)  # Select the most frequent killer per floor
# Filter top_killed_by to include only the key floors
top_killed_by_filtered <- top_killed_by %>%
filter(floor_reached %in% key_floors)  # Keep only key floors
# Simplified plot with labels only for key floors
# Plot with labels only for key floors
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by_filtered, aes(x = floor_reached, y = 0, label = killed_by),
vjust = -0.5, angle = 90, color = "black", size = 3, inherit.aes = FALSE)
reddit_data_deaths <- nested_df %>%
filter(
(victory==FALSE & floor_reached <52)
) %>%
select(character_chosen, killed_by, floor_reached, ascension_level, victory)  # Select relevant columns for inspection
# Your list of key floors to label
key_floors <- c(1, 8, 16, 24, 33, 40, 50)
# Step 2: Summarize the killed_by data (count deaths by floor and killer)
killed_by_summary <- reddit_data_deaths %>%
group_by(floor_reached, killed_by) %>%
summarise(count = n(), .groups = 'drop')  # Count deaths by floor and killer
# Step 3: Select the most frequent killer for each floor
top_killed_by <- killed_by_summary %>%
group_by(floor_reached) %>%
top_n(1, count)  # Select the most frequent killer per floor
# Filter top_killed_by to include only the key floors
top_killed_by_filtered <- top_killed_by %>%
filter(floor_reached %in% key_floors)  # Keep only key floors
# Simplified plot with labels only for key floors
# Plot with labels only for key floors
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by_filtered, aes(x = floor_reached, y = 0, label = killed_by),
vjust = -0.5, angle = 90, color = "black", size = 3, inherit.aes = FALSE)
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by_filtered, aes(x = floor_reached, y = 0, label = killed_by),
vjust = -1.5, angle = 90, color = "black", size = 3, inherit.aes = FALSE)  # Adjusted vjust
print(key_floors)
print(top_killed_by_filtered)
# Extract density data from the plot
density_data <- ggplot_build(
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5)
)$data[[1]]
# Calculate the maximum density (max_y) for each key floor
density_peaks <- density_data %>%
group_by(floor_reached = round(x)) %>%  # Round x (the floor_reached) to match actual floors
summarise(max_y = max(density)) %>%  # Get max density for each floor
filter(floor_reached %in% key_floors)  # Only keep key floors
# Merge max_y (density peaks) with top_killed_by_filtered
top_killed_by_filtered <- top_killed_by_filtered %>%
left_join(density_peaks, by = "floor_reached")  # Merge by floor_reached
# Plot with horizontal labels at the density peaks
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by_filtered, aes(x = floor_reached, y = max_y + 0.02, label = killed_by),
vjust = -0.5, angle = 0, color = "black", size = 4, inherit.aes = FALSE)  # Horizontal labels
### Step 13: Plot reddit deaths by character by floor reached ====
# Filter to focus on deaths (victory == FALSE) before Act IV (floor_reached < 52)
reddit_data_deaths <- nested_df %>%
filter(victory == FALSE & floor_reached < 52) %>%
select(character_chosen, killed_by, floor_reached, ascension_level, victory)
# List of key floors to label
key_floors <- c(1, 8, 16, 24, 33, 40, 50)
# Step 1: Summarize the killed_by data (count deaths by floor and killer)
killed_by_summary <- reddit_data_deaths %>%
group_by(floor_reached, killed_by) %>%
summarise(count = n(), .groups = 'drop')  # Count deaths by floor and killer
# Step 2: Select the most frequent killer for each floor
top_killed_by <- killed_by_summary %>%
group_by(floor_reached) %>%
top_n(1, count)  # Select the most frequent killer per floor
# Step 3: Filter to include only the key floors
top_killed_by_filtered <- top_killed_by %>%
filter(floor_reached %in% key_floors)
# Step 4: Calculate density peaks for the key floors
# Extract density data from the plot
density_data <- ggplot_build(
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5)
)$data[[1]]
# Calculate the maximum density (max_y) for each key floor
density_peaks <- density_data %>%
group_by(floor_reached = round(x)) %>%
summarise(max_y = max(density)) %>%
filter(floor_reached %in% key_floors)
# Step 5: Merge max_y (density peaks) with top_killed_by_filtered
top_killed_by_filtered <- top_killed_by_filtered %>%
left_join(density_peaks, by = "floor_reached")
# Step 6: Plot the density chart with horizontal labels at the density peaks
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by_filtered, aes(x = floor_reached, y = max_y + 0.02, label = killed_by),
vjust = -0.5, angle = 0, color = "black", size = 4, inherit.aes = FALSE)  # Horizontal labels at density peaks
## Step 13: Plot Reddit deaths by character and floor reached ====
### Step 13.1: Filter relevant data
# Focus on deaths (victory == FALSE) before Act IV (floor_reached < 52)
reddit_data_deaths <- nested_df %>%
filter(victory == FALSE & floor_reached < 52) %>%
select(character_chosen, killed_by, floor_reached, ascension_level, victory)
# End Step 13.1
### Step 13.2: Summarize killed_by data
# Count deaths by floor and killer
killed_by_summary <- reddit_data_deaths %>%
group_by(floor_reached, killed_by) %>%
summarise(count = n(), .groups = 'drop')  # Summarize deaths per floor
# End Step 13.2
### Step 13.3: Identify top killers for each floor
# Select the most frequent killer per floor
top_killed_by <- killed_by_summary %>%
group_by(floor_reached) %>%
top_n(1, count)  # Keep only the most frequent killer per floor
# End Step 13.3
### Step 13.4: Filter for key floors only
# Only include key floors for labeling: 1, 8, 16, 24, 33, 40, 50
key_floors <- c(1, 8, 16, 24, 33, 40, 50)
top_killed_by_filtered <- top_killed_by %>%
filter(floor_reached %in% key_floors)
# End Step 13.4
### Step 13.5: Calculate density peaks for key floors
# Extract density data and calculate max_y (density peaks) for each key floor
density_data <- ggplot_build(
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5)
)$data[[1]]
density_peaks <- density_data %>%
group_by(floor_reached = round(x)) %>%
summarise(max_y = max(density)) %>%
filter(floor_reached %in% key_floors)
# Merge max_y with top_killed_by_filtered
top_killed_by_filtered <- top_killed_by_filtered %>%
left_join(density_peaks, by = "floor_reached")
# End Step 13.5
### Step 13.6: Plot density chart with top_killed_by labels
# Plot density with the most frequent killers at the density peaks
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by_filtered, aes(x = floor_reached, y = max_y + 0.02, label = killed_by),
vjust = -0.5, angle = 0, color = "black", size = 4, inherit.aes = FALSE)
# End Step 13.6
## Step 13: Plot Reddit deaths by character and floor reached ====
### Step 13.1: Filter relevant data
# Focus on deaths (victory == FALSE) before Act IV (floor_reached < 52)
reddit_data_deaths <- nested_df %>%
filter(victory == FALSE & floor_reached < 52) %>%
select(character_chosen, killed_by, floor_reached, ascension_level, victory)
### Step 13.2: Summarize killed_by data
# Count deaths by floor and killer
killed_by_summary <- reddit_data_deaths %>%
group_by(floor_reached, killed_by) %>%
summarise(count = n(), .groups = 'drop')  # Summarize deaths per floor
### Step 13.3: Identify top killers for each floor
# Select the most frequent killer per floor
top_killed_by <- killed_by_summary %>%
group_by(floor_reached) %>%
top_n(1, count)  # Keep only the most frequent killer per floor
### Step 13.4: Filter for key floors only
# Only include key floors for labeling: 1, 8, 16, 24, 33, 40, 50
key_floors <- c(1, 8, 16, 24, 33, 40, 50)
top_killed_by_filtered <- top_killed_by %>%
filter(floor_reached %in% key_floors)
### Step 13.5: Calculate density peaks for key floors
# Extract density data and calculate max_y (density peaks) for each key floor
density_data <- ggplot_build(
ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5)
)$data[[1]]
density_peaks <- density_data %>%
group_by(floor_reached = round(x)) %>%
summarise(max_y = max(density)) %>%
filter(floor_reached %in% key_floors)
# Merge max_y with top_killed_by_filtered
top_killed_by_filtered <- top_killed_by_filtered %>%
left_join(density_peaks, by = "floor_reached")
### Step 13.6: Plot density chart with top_killed_by labels
# Plot density with the most frequent killers at the density peaks
plot_killed_by <- ggplot(reddit_data_deaths, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = simple_character_colors) +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Reddit Density Plot of Floors Reached by Character",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
geom_text(data = top_killed_by_filtered, aes(x = floor_reached, y = max_y + 0.02, label = killed_by),
vjust = -0.5, angle = 0, color = "black", size = 4, inherit.aes = FALSE)
## Step 14: Save plots as PNG files ====
output_dir <- "Slay_The_Spire/images"
# Create the output directory if it does not exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Print each plot
print(plot_win_rates)
print(plot_ascension_level)
print(plot_top_5_relics)
print(plot_killed_by)
source("~/Documents/R_Projects/Slay_The_Spire/scripts/Initialize_StS_Project_Script.R", echo=TRUE)
source("~/Documents/R_Projects/Slay_The_Spire/scripts/StS_Util_Script.R", echo=TRUE)
source("~/Documents/R_Projects/Slay_The_Spire/scripts/StS_Util_Script.R", echo=TRUE)
nested_df %>%
select(card_choices) %>%
summary()
nested_df %>%
select(card_choices) %>%
table()
nested_df %>% select(card_choices)
top_cards_df <- nested_df %>%
filter(victory==TRUE)
top_cards_df %<>% filter(Victory == TRUE)
colnames(nested_df)
top_cards_df %<>% filter(victory == TRUE)
top_cards_df %>% select(card_choices) %>% summary()
top_cards_df %>% select(card_choices) %>% print(n=10)
head(top_cards_df)
top_cards_df <- nested_df %>%
filter(victory == TRUE) %>%
unnest(cols = card_choices) %>%
group_by(character_chosen, card_choices) %>%
summarize(count = n()) %>%
mutate(rank = dense_rank(desc(count))) %>%  # Rank card choices by frequency
filter(rank >= 1 & rank <= 5) %>%  # Select top 5 card choices for each character
ungroup()
# Assuming `card_choices` is a nested dataframe with a `picked` column
top_cards_df <- nested_df %>%
filter(victory == TRUE) %>%
unnest(cols = card_choices) %>%  # Unnest the card_choices column
group_by(character_chosen, picked) %>%  # Group by character and picked cards
summarize(count = n()) %>%  # Count occurrences of each card choice
mutate(rank = dense_rank(desc(count))) %>%  # Rank cards by frequency
filter(rank >= 1 & rank <= 5) %>%  # Select top 5 card choices for each character
ungroup()
print(top_cards_df)
colnames(nested_df)
str(nested_df$card_choices[[1]])  # Inspect the structure of the first row
card_data <- read.csv("Community Data/Slay the Spire Reference - Cards")
card_data <- read.csv("Users/bryan/Documents/R_Projects/SlayTheSpire/Community Data/Slay the Spire Reference - Cards")
card_data <- read.csv("/Users/bryan/Documents/R_Projects/SlayTheSpire/Community Data/Slay the Spire Reference - Cards")
getwd()
card_data <- read.csv("/Community Data/Slay the Spire Reference - Cards")
card_data <- read.csv("/Users/bryan/Documents/R_Projects/Slay_The_Spire/Community Game Info/Slay the Spire Reference - Cards.csv")
summary(card_data)
print(card_data)
library(dplyr)
library(tidyr)
# Step 1: Create a new column for 'character_chosen' and fill down
card_data_clean <- card_data %>%
mutate(character_chosen = ifelse(Name %in% c("Ironclad Cards", "Silent Cards", "Defect Cards", "Watcher Cards"),
sub(" Cards", "", Name),  # Remove " Cards" to just keep the character name
NA)) %>%
fill(character_chosen)  # Fill down the character name for each card
# Step 2: Remove the rows that are just character headers
card_data_clean <- card_data_clean %>%
filter(!Name %in% c("Ironclad Cards", "Silent Cards", "Defect Cards", "Watcher Cards"))
# Now `card_data_clean` should have a 'character_chosen' column and no extra header rows
print(card_data_clean)
# Replace character names to match the JSON data nomenclature
card_data_clean <- card_data_clean %>%
mutate(character_chosen = recode(character_chosen,
"Ironclad" = "IRONCLAD",
"Silent" = "THE_SILENT",
"Defect" = "DEFECT",
"Watcher" = "WATCHER"))
# Verify the changes
print(card_data_clean)
## Step 14: Save plots as PNG files ====
output_dir <- "Slay_The_Spire/images"
top_cards_df <- nested_df %>%
filter(victory == TRUE) %>%
unnest(cols = card_choices) %>%  # Unnest the card_choices column
group_by(character_chosen, picked) %>%  # Group by character and picked cards
summarize(count = n()) %>%  # Count occurrences of each card choice
mutate(rank = dense_rank(desc(count))) %>%  # Rank cards by frequency
filter(rank >= 1 & rank <= 5) %>%  # Select top 5 card choices for each character
ungroup()
print(top_cards_df)
top_cards_with_details <- top_cards_df %>%
left_join(card_data_clean, by = c("picked" = "Name")) %>%
select(character_chosen, picked, count, rank, Rarity, Type)
head(top_cards_df)
head(card_data_clean)
top_cards_with_details <- top_cards_df %>%
left_join(card_data_clean, by = c("picked" = "Name", "character_chosen" = "character_chosen")) %>%
select(character_chosen, picked, count, rank, Rarity, Type)
# Print the result to verify
print(top_cards_with_details)
print(card_data)
top_cards_with_details <- top_cards_df %>%
left_join(card_data_clean, by = c("picked" = "Name", "character_chosen" = "character_chosen")) %>%
select(character_chosen, picked, count, rank, Rarity, Type) %>%
# Print the result to verify
print(top_cards_with_details)
top_cards_with_details <- top_cards_df %>%
left_join(card_data_clean, by = c("picked" = "Name", "character_chosen" = "character_chosen")) %>%
select(character_chosen, picked, count, rank, Rarity, Type) %>%
filter(Rarity!=NA)
# Print the result to verify
print(top_cards_with_details)
source("~/Documents/R_Projects/Slay_The_Spire/scripts/Initialize_StS_Project_Script.R", echo=TRUE)
source("~/Documents/R_Projects/Slay_The_Spire/scripts/StS_Util_Script.R", echo=TRUE)
