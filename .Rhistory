clear
wipe
exit
source("~/.active-rstudio-document")
source("~/Documents/R_Projects/Slay_The_Spire/scripts/Initialize_StS_Project_Script.R", echo=TRUE)
?gzfile
library(help="gzfile")
?gzfile
source("~/Documents/R_Projects/Slay_The_Spire/scripts/Initialize_StS_Project_Script.R", echo=TRUE)
getwd()
november_rds_path <- "Slay_The_Spire/data/november.rds"
if (!file.exists(november_rds_path)) {
message("november.rds not found. Converting from JSON...")
data <- jsonlite::fromJSON("data/november.json")
saveRDS(data, file = november_rds_path)
message("november.rds created successfully.")
}
source("~/Documents/R_Projects/Slay_The_Spire/scripts/Initialize_StS_Project_Script.R", echo=TRUE)
source("~/Documents/R_Projects/Slay_The_Spire/scripts/Initialize_StS_Project_Script.R", echo=TRUE)
source("~/Documents/R_Projects/Slay_The_Spire/scripts/Initialize_StS_Project_Script.R", echo=TRUE)
getwd()
source("~/Documents/R_Projects/Slay_The_Spire/scripts/Initialize_StS_Project_Script.R", echo=TRUE)
source("~/Documents/R_Projects/Slay_The_Spire/scripts/Initialize_StS_Project_Script.R", echo=TRUE)
source("~/Documents/R_Projects/Slay_The_Spire/scripts/StS_Util_Script.R", echo=TRUE)
source("~/Documents/R_Projects/Slay_The_Spire/scripts/StS_Util_Script.R", echo=TRUE)
plot_top_5_relics <- ggplot(top_5_relics_with_win_rate, aes(x = relics, y = count, fill = character_chosen)) +
geom_bar(stat = "identity") +
geom_line(aes(y = win_rate * max(count), group = 1), color = "black", size = 1, linetype = "dashed") +  # Add win rate line
geom_text(aes(label = paste0(round(win_rate * 100, 1), "%"), y = win_rate * max(count)), vjust = -0.5, linewidth = 3.5) +  # Annotate with win rates
facet_wrap(~ character_chosen, scales = "free_x") +
scale_x_discrete(drop = FALSE) +
scale_fill_manual(values = simple_character_colors) +
labs(title = "Top 5 Winning Relics by Character with Win Rates",
x = "Relic",
y = "Count",
sec.axis = sec_axis(~./max(top_5_relics_with_win_rate$count), name = "Win Rate (%)")) +  # Add secondary axis
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
bryan_rds_path <- "/Users/bryan/Documents/R_Projects/Slay_The_Spire/data/bryan.rds"
if (!file.exists(bryan_rds_path)) {
directories <- c("Slay_The_Spire/Bryan's Run Data/runs/DEFECT",
"Slay_The_Spire/Bryan's Run Data/runs/IRONCLAD",
"Slay_The_Spire/Bryan's Run Data/runs/THE_SILENT",
"Slay_The_Spire/Bryan's Run Data/runs/WATCHER")
combine_and_save_runs(directories, bryan_rds_path)
}
source("~/Documents/R_Projects/Slay_The_Spire/scripts/Initialize_StS_Project_Script.R", echo=TRUE)
source("~/Documents/R_Projects/Slay_The_Spire/scripts/StS_Util_Script.R", echo=TRUE)
shiny::runApp('Slay_The_Spire_Exploration')
runApp('Slay_The_Spire_Exploration')
source("~/Documents/R_Projects/Slay_The_Spire/scripts/Initialize_StS_Project_Script.R", echo=TRUE)
summary(bryan_data)
colnames(bryan_data)
str(bryan_data$event[[1]])
unnested_data <- unnest_wider(bryan_data, event)
colnames(unnested_data)
head(unnested_data$win_rate)
print(unnested_data$win_rate)
range(unnested_data$win_rate, na.rm = TRUE)
options(digits = 10)
head(unnested_data$win_rate)
options(digits = 10)
head(unnested_data$win_rate)
options(digits = 10)
head(unnested_data$win_rate)
summary(unnested_data$win_rate)
print(unnested_data$win_rate)
colnames(unnested_data)
table(unnested_data$killed_by, useNA = "ifany")
deaths_by_character <- unnested_data %>%
group_by(character_chosen, killed_by) %>%
summarize(death_count = n(), .groups = 'drop') %>%
arrange(character_chosen, desc(death_count))
print(deaths_by_character)
bryan_data %>%
unnest_wider(event) %>%
group_by(character_chosen, killed_by) %>%
summarize(death_count = n(), .groups = 'drop') %>%
filter(death_count == 0) %>%
print()
print(deaths_by_character)
print(deaths_by_character, n=120)
print(deaths_by_character, n=130)
deaths_by_character %<>%
mutate(act = case_when(
floor_reached >= 1 & floor_reached <= 17 ~ "Act I",
floor_reached >= 18 & floor_reached <= 34 ~ "Act II",
floor_reached >= 35 & floor_reached <= 51 ~ "Act III",
TRUE ~ "Unknown"
))
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
}
# List of required packages
required_packages <- c("dplyr", "ggplot2", "googledrive", "googlesheets4", "magrittr"
"jsonlite", "lubridate", "tidyr", "tidyverse", "progress", "scales", "pacman", "rio", "randomForest")
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
}
# List of required packages
required_packages <- c("dplyr", "ggplot2", "googledrive", "googlesheets4", "magrittr",
"jsonlite", "lubridate", "tidyr", "tidyverse", "progress", "scales", "pacman", "rio", "randomForest")
# Install any missing packages
install_if_missing(required_packages)
# Load the packages
lapply(required_packages, library, character.only = TRUE)
deaths_by_character %<>%
mutate(act = case_when(
floor_reached >= 1 & floor_reached <= 17 ~ "Act I",
floor_reached >= 18 & floor_reached <= 34 ~ "Act II",
floor_reached >= 35 & floor_reached <= 51 ~ "Act III",
TRUE ~ "Unknown"
))
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
}
# List of required packages
required_packages <- c("dplyr", "ggplot2", "googledrive", "googlesheets4", "magrittr",
"jsonlite", "lubridate", "tidyr", "tidyverse", "progress", "scales", "pacman", "rio", "randomForest")
# Install any missing packages
install_if_missing(required_packages)
# Load the packages
lapply(required_packages, library, character.only = TRUE)
# Assuming 'bryan_data' is the original data frame containing floor_reached
deaths_with_act <- bryan_data %>%
# Add the 'act' column based on 'floor_reached'
mutate(act = case_when(
floor_reached >= 1 & floor_reached <= 17 ~ "Act I",
floor_reached >= 18 & floor_reached <= 34 ~ "Act II",
floor_reached >= 35 & floor_reached <= 51 ~ "Act III",
TRUE ~ "Unknown"
)) %>%
# Then group by character and act to count deaths
group_by(character_chosen, act, killed_by) %>%
summarize(death_count = n(), .groups = 'drop') %>%
arrange(character_chosen, act, desc(death_count))
# Assuming 'bryan_data' is the original data frame containing floor_reached
deaths_with_act <- unnested_data %>%
# Add the 'act' column based on 'floor_reached'
mutate(act = case_when(
floor_reached >= 1 & floor_reached <= 17 ~ "Act I",
floor_reached >= 18 & floor_reached <= 34 ~ "Act II",
floor_reached >= 35 & floor_reached <= 51 ~ "Act III",
TRUE ~ "Unknown"
)) %>%
# Then group by character and act to count deaths
group_by(character_chosen, act, killed_by) %>%
summarize(death_count = n(), .groups = 'drop') %>%
arrange(character_chosen, act, desc(death_count))
# Now you can inspect the deaths_by_character_with_act data frame
print(deaths_with_act)
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
}
# List of required packages
required_packages <- c("dplyr", "ggplot2", "googledrive", "googlesheets4", "magrittr",
"jsonlite", "lubridate", "tidyr", "tidyverse", "progress", "scales", "pacman", "rio", "randomForest")
# Install any missing packages
install_if_missing(required_packages)
# Load the packages
lapply(required_packages, library, character.only = TRUE)
# Heatmap: Deaths by Enemy and Act
ggplot(deaths_with_act, aes(x = killed_by, y = act, fill = death_count)) +
geom_tile(color = "white") +
facet_wrap(~character_chosen) +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Heatmap of Deaths by Enemy and Act",
x = "Enemy",
y = "Act",
fill = "Number of Deaths") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Heatmap: Deaths by Enemy and Act
ggplot(deaths_with_act, aes(x = floor_reached, y = act, fill = death_count)) +
geom_tile(color = "white") +
facet_wrap(~character_chosen) +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Heatmap of Deaths by Enemy and Act",
x = "Enemy",
y = "Act",
fill = "Number of Deaths") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
}
# List of required packages
required_packages <- c("dplyr", "ggplot2", "googledrive", "googlesheets4", "magrittr",
"jsonlite", "lubridate", "tidyr", "tidyverse", "progress", "scales", "pacman", "rio", "randomForest")
# Install any missing packages
install_if_missing(required_packages)
# Load the packages
lapply(required_packages, library, character.only = TRUE)
colnames(unnested_data)
colnames(deaths_with_act)
# Assuming 'bryan_data' is the original data frame containing floor_reached
deaths_with_act <- unnested_data %>%
# Add the 'act' column based on 'floor_reached'
mutate(act = case_when(
floor_reached >= 1 & floor_reached <= 17 ~ "Act I",
floor_reached >= 18 & floor_reached <= 34 ~ "Act II",
floor_reached >= 35 & floor_reached <= 51 ~ "Act III",
TRUE ~ "Unknown"
)) %>%
# Then group by character and act to count deaths
group_by(character_chosen, act, killed_by, floor_reached) %>%
summarize(death_count = n(), .groups = 'drop') %>%
arrange(character_chosen, act, desc(death_count))
# Now you can inspect the deaths_by_character_with_act data frame
print(deaths_with_act)
colnames(deaths_with_act)
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
}
# List of required packages
required_packages <- c("dplyr", "ggplot2", "googledrive", "googlesheets4", "magrittr",
"jsonlite", "lubridate", "tidyr", "tidyverse", "progress", "scales", "pacman", "rio", "randomForest")
# Install any missing packages
install_if_missing(required_packages)
# Load the packages
lapply(required_packages, library, character.only = TRUE)
# Heatmap: Deaths by Enemy and Act
ggplot(deaths_with_act, aes(x = floor_reached, y = act, fill = death_count)) +
geom_tile(color = "white") +
facet_wrap(~character_chosen) +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Heatmap of Deaths by Enemy and Act",
x = "Enemy",
y = "Act",
fill = "Number of Deaths") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
}
# List of required packages
required_packages <- c("dplyr", "ggplot2", "googledrive", "googlesheets4", "magrittr",
"jsonlite", "lubridate", "tidyr", "tidyverse", "progress", "scales", "pacman", "rio", "randomForest")
# Install any missing packages
install_if_missing(required_packages)
# Load the packages
lapply(required_packages, library, character.only = TRUE)
# Histogram of Deaths by Floor Reached
ggplot(deaths_with_act, aes(x = floor_reached)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "white") +
labs(title = "Distribution of Deaths by Floor Reached",
x = "Floor Reached",
y = "Number of Deaths") +
theme_minimal()
# Density plot of Deaths by Floor Reached
ggplot(deaths_with_act, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.6) +
labs(title = "Density of Deaths by Floor Reached",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
theme(legend.position = "bottom")
# Density plot of Deaths by Floor Reached
ggplot(deaths_with_act, aes(x = floor_reached, fill = character_chosen)) +
geom_density(alpha = 0.5) +
labs(title = "Density of Deaths by Floor Reached",
x = "Floor Reached",
y = "Density") +
theme_minimal() +
theme(legend.position = "bottom")
# Identify boss floors
deaths_with_act <- deaths_with_act %>%
mutate(is_boss_floor = floor_reached %in% c(17, 34, 51))
# Bar plot: Deaths by Act and Character with Boss Floors Highlighted
ggplot(deaths_with_act, aes(x = act, y = death_count, fill = is_boss_floor)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~character_chosen) +
scale_fill_manual(values = c("lightgrey", "darkred"), labels = c("Non-Boss Floor", "Boss Floor")) +
labs(title = "Deaths by Act and Character with Boss Floors Highlighted",
x = "Act",
y = "Number of Deaths",
fill = "Floor Type") +
theme_minimal()
# Step 1: Categorize deaths by act and floor type (non-boss vs. boss)
deaths_with_act <- deaths_with_act %>%
mutate(floor_type = case_when(
floor_reached %in% c(17) ~ "Act I Boss",
floor_reached %in% c(34) ~ "Act II Boss",
floor_reached %in% c(51) ~ "Act III Boss",
floor_reached >= 1 & floor_reached < 17 ~ "Act I (Non-Boss)",
floor_reached >= 18 & floor_reached < 34 ~ "Act II (Non-Boss)",
floor_reached >= 35 & floor_reached < 51 ~ "Act III (Non-Boss)",
TRUE ~ "Unknown"
))
# Step 2: Order the factor levels for correct display
deaths_with_act$floor_type <- factor(deaths_with_act$floor_type, levels = c(
"Act I (Non-Boss)", "Act I Boss",
"Act II (Non-Boss)", "Act II Boss",
"Act III (Non-Boss)", "Act III Boss",
"Unknown"
))
# Step 3: Plot deaths by character and floor type (split by act and boss)
ggplot(deaths_with_act, aes(x = floor_type, y = death_count, fill = floor_type)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~character_chosen) +
scale_fill_manual(values = c("skyblue", "darkblue", "lightgreen", "darkgreen", "lightcoral", "darkred", "grey")) +
labs(title = "Deaths by Act and Floor Type (Non-Boss vs. Boss)",
x = "Floor Type",
y = "Number of Deaths") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
# Step 1: Categorize deaths by act and floor type (non-boss vs. boss)
deaths_with_act <- deaths_with_act %>%
mutate(floor_type = case_when(
floor_reached == 17 ~ "Act I Boss",
floor_reached == 34 ~ "Act II Boss",
floor_reached == 51 ~ "Act III Boss",
floor_reached >= 1 & floor_reached < 17 ~ "Act I (Non-Boss)",
floor_reached >= 18 & floor_reached < 34 ~ "Act II (Non-Boss)",
floor_reached >= 35 & floor_reached < 51 ~ "Act III (Non-Boss)",
TRUE ~ "Unknown"
))
# Step 2: Order the factor levels for correct display
deaths_with_act$floor_type <- factor(deaths_with_act$floor_type, levels = c(
"Act I (Non-Boss)", "Act I Boss",
"Act II (Non-Boss)", "Act II Boss",
"Act III (Non-Boss)", "Act III Boss"
))
# Step 3: Plot deaths by floor type (grouped by act)
ggplot(deaths_with_act, aes(x = floor_type, y = death_count, fill = floor_type)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~character_chosen) +
scale_fill_manual(values = c("skyblue", "blue", "lightgreen", "green", "lightcoral", "red")) +
labs(title = "Deaths by Act and Floor Type (Non-Boss vs. Boss)",
x = "Floor Type",
y = "Number of Deaths") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
# Step 1: Categorize deaths by act and floor type (non-boss vs. boss)
deaths_with_act <- deaths_with_act %>%
mutate(floor_type = case_when(
floor_reached == 17 ~ "Act I Boss",
floor_reached == 34 ~ "Act II Boss",
floor_reached == 51 ~ "Act III Boss",
floor_reached >= 1 & floor_reached < 17 ~ "Act I (Non-Boss)",
floor_reached >= 18 & floor_reached < 34 ~ "Act II (Non-Boss)",
floor_reached >= 35 & floor_reached < 51 ~ "Act III (Non-Boss)",
TRUE ~ "Unknown"
))
# Step 2: Order the factor levels for correct display
deaths_with_act$floor_type <- factor(deaths_with_act$floor_type, levels = c(
"Act I (Non-Boss)", "Act I Boss",
"Act II (Non-Boss)", "Act II Boss",
"Act III (Non-Boss)", "Act III Boss"
))
# Step 3: Plot deaths by floor type (grouped by act)
ggplot(deaths_with_act, aes(x = floor_type, y = death_count, fill = floor_type)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~character_chosen) +
scale_fill_manual(values = c("skyblue", "blue", "lightgreen", "green", "lightcoral", "red")) +
labs(title = "Deaths by Act and Floor Type (Non-Boss vs. Boss)",
x = "Floor Type",
y = "Number of Deaths") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
# Inspect the data to verify the floor_type assignment
print(head(deaths_with_act))
print(deaths_with_act, n=200)
# Step 1: Categorize deaths by act and floor type (non-boss vs. boss)
deaths_with_act <- deaths_with_act %>%
mutate(floor_type = case_when(
floor_reached == 16 ~ "Act I Boss",
floor_reached == 33 ~ "Act II Boss",
floor_reached == 50 ~ "Act III Boss",
floor_reached >= 1 & floor_reached < 16 ~ "Act I (Non-Boss)",
floor_reached >= 18 & floor_reached < 33 ~ "Act II (Non-Boss)",
floor_reached >= 35 & floor_reached < 50 ~ "Act III (Non-Boss)",
TRUE ~ "Unknown"
))
# Step 2: Order the factor levels for correct display
deaths_with_act$floor_type <- factor(deaths_with_act$floor_type, levels = c(
"Act I (Non-Boss)", "Act I Boss",
"Act II (Non-Boss)", "Act II Boss",
"Act III (Non-Boss)", "Act III Boss"
))
# Step 3: Plot deaths by floor type (grouped by act)
ggplot(deaths_with_act, aes(x = floor_type, y = death_count, fill = floor_type)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~character_chosen) +
scale_fill_manual(values = c("skyblue", "blue", "lightgreen", "green", "lightcoral", "red")) +
labs(title = "Deaths by Act and Floor Type (Non-Boss vs. Boss)",
x = "Floor Type",
y = "Number of Deaths") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
# Re-order the factor levels of `floor_type` to group by Act
deaths_with_act$floor_type <- factor(deaths_with_act$floor_type,
levels = c("Act I Non-Boss", "Act I Boss",
"Act II Non-Boss", "Act II Boss",
"Act III Non-Boss", "Act III Boss",
"Victory"))
# Reclassify NAs based on floor reached
deaths_with_act <- deaths_with_act %>%
mutate(floor_type = case_when(
is.na(killed_by) & floor_reached < 50 ~ "Act " %>%
case_when(floor_reached <= 16 ~ "I Non-Boss",
floor_reached <= 33 ~ "II Non-Boss",
TRUE ~ "III Non-Boss"),
is.na(killed_by) & floor_reached == 51 ~ "Victory",
TRUE ~ floor_type  # Keep existing classifications
))
# Reclassify NAs based on floor reached
deaths_with_act <- deaths_with_act %>%
mutate(floor_type = case_when(
is.na(killed_by) & floor_reached < 50 ~ "Act " %>%
case_when(floor_reached <= 16 ~ "I Non-Boss",
floor_reached <= 33 ~ "II Non-Boss",
TRUE ~ "III Non-Boss"),
is.na(killed_by) & floor_reached == 51 ~ "Victory",
TRUE ~ floor_type  # Keep existing classifications
))
deaths_with_act <- deaths_with_act %>%
mutate(floor_type = case_when(
is.na(killed_by) & floor_reached <= 16 ~ "Act I Non-Boss",
is.na(killed_by) & floor_reached > 16 & floor_reached <= 33 ~ "Act II Non-Boss",
is.na(killed_by) & floor_reached > 33 & floor_reached < 50 ~ "Act III Non-Boss",
is.na(killed_by) & floor_reached == 51 ~ "Victory",
TRUE ~ floor_type  # Keep existing classifications
))
# Plot the updated data with the new classifications
ggplot(deaths_with_act, aes(x = floor_type, y = death_count, fill = floor_type)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~character_chosen) +
scale_fill_manual(values = c("skyblue", "blue", "lightgreen", "green", "lightcoral", "red", "gold")) +
labs(title = "Deaths by Act and Floor Type (Non-Boss vs. Boss)",
x = "Floor Type",
y = "Number of Deaths") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
deaths_with_act <- deaths_with_act %>%
mutate(floor_type = case_when(
is.na(killed_by) & floor_reached <= 16 ~ "Act I Non-Boss",
is.na(killed_by) & floor_reached == 17 ~ "Act I Boss",
is.na(killed_by) & floor_reached > 17 & floor_reached <= 33 ~ "Act II Non-Boss",
is.na(killed_by) & floor_reached == 34 ~ "Act II Boss",
is.na(killed_by) & floor_reached > 34 & floor_reached <= 50 ~ "Act III Non-Boss",
is.na(killed_by) & floor_reached == 51 ~ "Victory",
TRUE ~ floor_type  # Keep existing classifications
)) %>%
mutate(floor_type = factor(floor_type,
levels = c("Act I Non-Boss", "Act I Boss",
"Act II Non-Boss", "Act II Boss",
"Act III Non-Boss", "Act III Boss",
"Victory")))
# Now, plot the updated data frame
ggplot(deaths_with_act, aes(x = floor_type, fill = character_chosen)) +
geom_bar(position = "dodge") +
labs(title = "Character Deaths by Act and Floor Type",
x = "Floor Type",
y = "Death Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
``
# Count the number of NA values in the killed_by column
na_count <- unnested_data %>%
filter(is.na(killed_by)) %>%
nrow()
cat("Number of NA values in 'killed_by':", na_count, "\n")
# Inspect a few rows with NA in killed_by to understand the context
na_events <- unnested_data %>%
filter(is.na(killed_by)) %>%
head(10)
print(na_events)
na_events_selected <- na_events %>% select(character_chosen, killed_by, floor_reached, victory, playtime)
print(na_events_selected)
# Count the number of NA values in the killed_by column
na_count <- unnested_data %>%
filter(is.na(killed_by)) %>%
nrow()
cat("Number of NA values in 'killed_by':", na_count, "\n")
# Inspect a few rows with NA in killed_by to understand the context
na_events <- unnested_data %>%
filter(is.na(killed_by)) %>%
if (!file.exists(bryan_rds_path)) {
error
# Count the number of NA values in the killed_by column
na_count <- unnested_data %>%
filter(is.na(killed_by)) %>%
nrow()
cat("Number of NA values in 'killed_by':", na_count, "\n")
# Inspect a few rows with NA in killed_by to understand the context
na_events <- unnested_data %>%
filter(is.na(killed_by))
print(na_events_selected)
na_events_selected <- na_events %>% select(character_chosen, killed_by, floor_reached, victory, playtime)
print(na_events_selected, n=100)
# Filter for victories and count by character
victories_by_character <- unnested_data %>%
filter(is.na(killed_by) & floor_reached == 51) %>%
group_by(character_chosen) %>%
summarize(total_victories = n())
# Display the result
print(victories_by_character)
source("~/Documents/R_Projects/Slay_The_Spire/scripts/StS_Util_Script.R", echo=TRUE)
source("~/Documents/R_Projects/Slay_The_Spire/scripts/StS_Util_Script.R", echo=TRUE)
